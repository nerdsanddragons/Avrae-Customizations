[
    {
        "name": "`randint(x)`",
        "desc": "Returns a random integer in the range [0..x).",
        "args": "`x` - *int* - The upper limit (non-inclusive).",
        "returns": "`int` - The random number.",
        "syntax": "randint(10)"
    },
    {
        "name": "`roll(dice)`",
        "desc": "Rolls a given string.",
        "args": "`dice` - *str* - The dice to roll.",
        "returns": "`int` - The result of the roll, or 0 if an error was encountered.",
        "syntax": "roll('1d20')"
    },
    {
        "name": "`vroll(dice[, multiply=1, add=0])`",
        "desc": "Verbosely rolls a given string, returning a formatted output.",
        "args": "`dice` - *str* - The dice to roll.\n`multiply` - *int, optional, default 1* - How many times to multiply each set of dice by.\n`add` - *int, optional, default 0* - How many dice to add to each set of dice.\n",
        "returns": "`Result` - The result of the roll.\n`Result.dice` *(str)* to access the rolled dice\n`Result.total` *(int)* for the final total\n`str(Result)` *(str)* for the combined output\n`Result.raw` *(list)* for the raw data of the roll\n`Result.consolidated()` *(str)* for the result of the rolls, with annotation included",
        "syntax": "vroll('1d20')"
    },
    {
        "name": "`int(x)`",
        "desc": "Converts x to an int.",
        "args": "`x` - *str, int, float* - The value to convert.",
        "returns": "`int` - The integer.",
        "syntax": "int('10')"
    },
    {
        "name": "`str(x)`",
        "desc": "Converts x to a string.",
        "args": "`x` - *str, int, float* - The value to convert.",
        "returns": "`str` - The string.",
        "syntax": "str(5)"
    },
    {
        "name": "`float(x)`",
        "desc": "Converts x to a float.",
        "args": "`x` - *str, int, float* - The value to convert.",
        "returns": "`float` - The string.",
        "syntax": "float(5)"
    },
    {
        "name": "`len(x)`",
        "desc": "Returns the length of a string or list.",
        "args": "`x` - *str, list* - The element to find the length of.",
        "returns": "`int` - The length.",
        "syntax": "len('words')"
    },
    {
        "name": "`floor(x)`",
        "desc": "Rounds a number down to the nearest integer.",
        "args": "`x` - *float, int* - The number to round.",
        "returns": "`int` - The resulting integer.",
        "syntax": "floor(6/5)"
    },
    {
        "name": "`ceil(x)`",
        "desc": "Rounds a number up to the nearest integer.",
        "args": "`x` - *float, int* - The number to round.",
        "returns": "`int` - The resulting integer.",
        "syntax": "ceil(6/5)"
    },
    {
        "name": "`round(x, digits)`",
        "desc": "Rounds x to digits digits. Rounds towards the nearest even number.",
        "args": "`x` - *float, int* - The number to round.\n`digits` - *int, optional* - How many digits to round to.",
        "returns": "`int` or `float` - The resulting number.",
        "syntax": "round(6.5)\nround(3.1415, 2)"
    },
    {
        "name": "`max(x, y[, z...])`",
        "desc": "Returns the largest of all the arguments.",
        "args": "`x, y` - *float, int* - The numbers to compare.",
        "returns": "`int` or `float` - The largest argument.",
        "syntax": "max(3, 14, 2)"
    },
    {
        "name": "`min(x, y[, z...])`",
        "desc": "Returns the smallest of all the arguments.",
        "args": "`x, y` - *float, int* - The numbers to compare.",
        "returns": "`int` or `float` - The smallest argument.",
        "syntax": "min(3, -2)"
    },
    {
        "name": "`time()`",
        "desc": "Gets the UNIX epoch time (seconds since Jan 1, 1970).",
        "args": "",
        "returns": "`float` - The time.",
        "syntax": "time()"
    },
    {
        "name": "`err(msg)`",
        "desc": "Stops evaluation of an alias and shows the user an error.",
        "args": "`msg` - *str* - The error to show.",
        "returns": "`None`",
        "syntax": "err('Something went wrong.')"
    },
    {
        "name": "`get_cc(name)`",
        "desc": "Gets the value of a custom counter.",
        "args": "`name` - *str* - The name of the custom counter to get the value of.",
        "returns": "`int` - The value of the counter.",
        "syntax": "get_cc('Ki')"
    },
    {
        "name": "`get_cc_max(name)`",
        "desc": "Gets the maximum value of a custom counter.",
        "args": "`name` - *str* - The name of the custom counter to get the max value of.",
        "returns": "`int` - The max value of the counter. Returns `2^32-1` if there is no max.",
        "syntax": "get_cc_max('Ki')"
    },
    {
        "name": "`get_cc_min(name)`",
        "desc": "Gets the minimum value of a custom counter.",
        "args": "`name` - *str* - The name of the custom counter to get the min value of.",
        "returns": "`int` - The min value of the counter. Returns -(2^32) if there is no min.",
        "syntax": "get_cc_min('Ki')"
    },
    {
        "name": "`set_cc(name, value[, strict])`",
        "desc": "Sets a custom counter to a new value.",
        "args": "`name` - *str* - The name of the custom counter to modify.\n`value` - *int* - The new value of the counter.\n`strict` - *True/False (optional, default False)* - if True, error if out of bounds.",
        "returns": "`None`",
        "syntax": "set_cc('Ki', 5)"
    },
    {
        "name": "`mod_cc(name, value[, strict])`",
        "desc": "Modifies a custom counter by a certain value.",
        "args": "`name` - *str* - The name of the custom counter to modify.\n`value` - *int* - The number to modify by of the counter.\n`strict` - *True/False (optional, default False)* - if True, error if out of bounds.",
        "returns": "`None`",
        "syntax": "mod_cc('Ki', -2)"
    },
    {
        "name": "`delete_cc(name)`",
        "desc": "Deletes a custom counter.",
        "args": "`name` - *str* - The name of the custom counter to delete.",
        "returns": "`None`",
        "syntax": "delete_cc('Ki')"
    },
    {
        "name": "`create_cc_nx(name[, minVal, maxVal, reset, dispType])`",
        "desc": "Creates a custom counter only if one with the same name doesn't exist.",
        "args": "`name` - *str* - The name of the cc to create.\n`minVal` - *str (Optional)* - The minimum value of the cc. Default: unlimited.\n`maxVal` - *str (Optional)* - The maximum value of the cc. Default: unlimited.\n`reset` - *str (Optional)* - The reset type of the cc (`'short'`, `'long'`, `'none'`, `None`). Default: None.\n`dispType` - *str (Optional)* - The display type of the cc (`'default'`, `'bubble'`). Default: default.",
        "returns": "`None`",
        "syntax": "create_cc_nx('SP', 0, 'SorcererLevel', 'long', 'bubble')"
    },
    {
        "name": "`create_cc(name[, minVal, maxVal, reset, dispType])`",
        "desc": "Creates a custom counter, overwriting any existing one with the same name.",
        "args": "`name` - *str* - The name of the cc to create.\n`minVal` - *str (Optional)* - The minimum value of the cc. Default: unlimited.\n`maxVal` - *str (Optional)* - The maximum value of the cc. Default: unlimited.\n`reset` - *str (Optional)* - The reset type of the cc (`'short'`, `'long'`, `'none'`, `None`). Default: None.\n`dispType` - *str (Optional)* - The display type of the cc (`'default'`, `'bubble'`). Default: default.",
        "returns": "`None`",
        "syntax": "create_cc('SP', 0, 'SorcererLevel', 'long', 'bubble')"
    },
    {
        "name": "`cc_exists(name)`",
        "desc": "Returns whether a certain cc exists.",
        "args": "`name` - *str* - The name of the custom counter to check.",
        "returns": "`bool` - Whether the cc exists.",
        "syntax": "cc_exists('Ki')"
    },
    {
        "name": "`cc_str(name)`",
        "desc": "Returns a string representation of a cc.",
        "args": "`name` - *str* - The name of the custom counter to check.",
        "returns": "`str` - The status of the cc.",
        "syntax": "cc_str('Ki')"
    },
    {
        "name": "`get_slots(level)`",
        "desc": "Gets the number of remaining spell slots of a certain level.",
        "args": "`level` - *int* - The level to get spell slots of.",
        "returns": "`int` - The number of remaining slots.",
        "syntax": "get_slots(3)"
    },
    {
        "name": "`get_slots_max(level)`",
        "desc": "Gets the maximum number of spell slots of a certain level.",
        "args": "`level` - *int* - The level to get the max spell slots of.",
        "returns": "`int` - The max number of slots.",
        "syntax": "get_slots_max(3)"
    },
    {
        "name": "`slots_str(level)`",
        "desc": "Gets a string representation of how many slots of a certain level a character has.",
        "args": "`level` - *int* - The level to get spell slots of.",
        "returns": "`str` - A string representing the number of slots, in bubble format.",
        "syntax": "slots_str(3)"
    },
    {
        "name": "`set_slots(level, value)`",
        "desc": "Sets the number of spell slots of a certain level.",
        "args": "`level` - *int* - The level of spell slot.\n`value` - *int* - The number of remaining slots.",
        "returns": "`None`",
        "syntax": "set_slots(3, 1)"
    },
    {
        "name": "`use_slot(level)`",
        "desc": "Uses one spell slot of a certain level.",
        "args": "`level` - *int* - The level of spell slot.",
        "returns": "`None`",
        "syntax": "use_slot(3)"
    },
    {
        "name": "`get_hp()`",
        "desc": "Gets the character's remaining HP.",
        "args": "",
        "returns": "`int` - The character's remaining HP.",
        "syntax": "get_hp()"
    },
    {
        "name": "`set_hp(val)`",
        "desc": "Sets the character's HP.",
        "args": "`val` - *int* - The remaining HP.",
        "returns": "`None`",
        "syntax": "set_hp(7)"
    },
    {
        "name": "`mod_hp(val[, overflow])`",
        "desc": "Modified the character's HP.",
        "args": "`val` - *int* - The amount to change HP by.\n`overflow` - *bool (default True)* - Whether or not to allow the modified hp to exceed the max",
        "returns": "`None`",
        "syntax": "mod_hp(-2)"
    },
    {
        "name": "`hp_str()`",
        "desc": "Gets a string describing the character's HP.",
        "args": "",
        "returns": "`str` - A string describing the character's HP.",
        "syntax": "hp_str()"
    },
    {
        "name": "`get_temphp()`",
        "desc": "Gets the character's temp HP.",
        "args": "",
        "returns": "`int` - The character's temp HP.",
        "syntax": "get_temphp()"
    },
    {
        "name": "`set_temphp(val)`",
        "desc": "Sets the character's temp HP.",
        "args": "`val` - *int* - The new temp HP.",
        "returns": "`None`",
        "syntax": "set_temphp(7)"
    },
    {
        "name": "`set_cvar(name, value)`",
        "desc": "Sets a cvar to a new value.",
        "args": "`name` - *str* - The name of the cvar to modify.\n`value` - *str* - The new value of the cvar.",
        "returns": "`None`",
        "syntax": "set_cvar('potato', 'fifteen')"
    },
    {
        "name": "`set_cvar_nx(name, value)`",
        "desc": "Sets a cvar to a new value, only if it doesn't already exist.",
        "args": "`name` - *str* - The name of the cvar to create.\n`value` - *str* - The new value of the cvar.",
        "returns": "`None`",
        "syntax": "set_cvar_nx('potato', 'fifteen')"
    },
    {
        "name": "`delete_cvar(name)`",
        "desc": "Deletes a cvar. Does nothing if the cvar does not exist.",
        "args": "`name` - *str* - The name of the cvar to delete.",
        "returns": "`None`",
        "syntax": "delete_cvar('potato')"
    },
    {
        "name": "`set_uvar(name, value)`",
        "desc": "Sets a uvar to a new value.",
        "args": "`name` - *str* - The name of the uvar to modify.\n`value` - *str* - The new value of the uvar.",
        "returns": "`None`",
        "syntax": "set_uvar('potato', 'fifteen')"
    },
    {
        "name": "`set_uvar_nx(name, value)`",
        "desc": "Sets a uvar to a new value, only if a cvar or uvar with the same name doesn't exist.",
        "args": "`name` - *str* - The name of the uvar to create.\n`value` - *str* - The new value of the uvar.",
        "returns": "`None`",
        "syntax": "set_uvar_nx('potato', 'fifteen')"
    },
    {
        "name": "`delete_uvar(name)`",
        "desc": "Deletes a uvar. Does nothing if the uvar does not exist.",
        "args": "`name` - *str* - The name of the uvar to delete.",
        "returns": "`None`",
        "syntax": "delete_uvar('potato')"
    },
    {
        "name": "`exists(name)`",
        "desc": "Returns whether a cvar or uvar exists.",
        "args": "`name` - *str* - The name of the cvar or uvar to check.",
        "returns": "`bool` - Whether the var exists.",
        "syntax": "exists('potato')"
    },
    {
        "name": "`uvar_exists(name)`",
        "desc": "Returns whether a uvar exists.",
        "args": "`name` - *str* - The name of the uvar to check.",
        "returns": "`bool` - Whether the uvar exists.",
        "syntax": "uvar_exists('potato')"
    },
    {
        "name": "`get_gvar(name)`",
        "desc": "Gets the value of a global variable.",
        "args": "`name` - *str* - The name of the gvar to get. Should be a UUID4.",
        "returns": "`str` - The value of the gvar.",
        "syntax": "get_gvar('87228cfb-43b6-4cd4-ac2e-14b59db149c0')"
    },
    {
        "name": "`get_raw()`",
        "desc": "Returns the raw character object.",
        "args": "",
        "returns": "`dict` - The raw character dictionary.",
        "syntax": "get_raw()"
    },
    {
        "name": "`combat()`",
        "desc": "Returns a SimpleCombat object representing the current combat of the channel",
        "args": "",
        "returns": "`SimpleCombat` - The combat.",
        "syntax": "combat()"
    },
    {
        "name": "`chanid()`",
        "desc": "Returns the Discord channel ID of the channel the command was called in.",
        "args": "",
        "returns": "`str` - The ID.",
        "syntax": "chanid()"
    },
    {
        "name": "`servid()`",
        "desc": "Returns the Discord server ID of the server the command was called in, or None if the command was called in PMs.",
        "args": "",
        "returns": "`str` - The ID.",
        "syntax": "servid()"
    },
    {
        "name": "`load_json(jsonstr)`",
        "desc": "Loads an object from a JSON string.",
        "args": "`jsonstr` - *str* - The JSON string to load.",
        "returns": "`object` - The encoded object.",
        "syntax": "load_json('{\\\"one\\\": 1}')"
    },
    {
        "name": "`dump_json(obj)`",
        "desc": "Serializes an object to a JSON string.",
        "args": "`obj` - *dict, list, str, int* - The object to serialize.",
        "returns": "`str` - The serialized string.",
        "syntax": "dump_json({'one': 1})"
    },
    {
        "name": "`combat().combatants`",
        "desc": "A list of all combatants in combat.",
        "args": "",
        "returns": "`list of SimpleCombatant` - All combatants in combat.",
        "syntax": "combat.combatants"
    },
    {
        "name": "`combat().current`",
        "desc": "The SimpleCombatant or SimpleGroup representing the current turn.",
        "args": "",
        "returns": "`SimpleCombatant` or `SimpleGroup` - The combatant or group.",
        "syntax": "combat.current"
    },
    {
        "name": "`combat().me`",
        "desc": "The SimpleCombatant representing the active character in combat, or None if the character is not in this combat.",
        "args": "",
        "returns": "`SimpleCombatant` - The combatant.",
        "syntax": "combat.me"
    },
    {
        "name": "`combat().round_num`",
        "desc": "The round number of the combat.",
        "args": "",
        "returns": "`int` - The round number.",
        "syntax": "combat.round_num"
    },
    {
        "name": "`combat().turn_num`",
        "desc": "The turn number (current initiative) of the combat.",
        "args": "",
        "returns": "`int` - The turn number.",
        "syntax": "combat.turn_num"
    },
    {
        "name": "`combat().get_combatant(name)`",
        "desc": "Gets a SimpleCombatant, fuzzy searching (partial match) for a match.",
        "args": "`name` - The name of the combatant to get.",
        "returns": "`SimpleCombatant` - The combatant.",
        "syntax": "combat.get_combatant('Padellis')"
    },
    {
        "name": "`combat().get_group(name)`",
        "desc": "Gets a SimpleGroup, searching (full match) for a match.",
        "args": "`name` - The name of the group to get.",
        "returns": "`SimpleGroup` - The group.",
        "syntax": "combat.get_group('Zombies')"
    },
    {
        "name": "`combatant.ac`",
        "desc": "The combatant's ac. Returns None if not visible.",
        "args": "",
        "returns": "`int` or `None` - The combatant's AC.",
        "syntax": "c.ac"
    },
    {
        "name": "`combatant.hp`",
        "desc": "The combatant's current hit points. Returns None if not visible.",
        "args": "",
        "returns": "`int` or `None` - The combatant's HP.",
        "syntax": "c.hp"
    },
    {
        "name": "`combatant.init`",
        "desc": "The combatant's rolled initiative.",
        "args": "",
        "returns": "`int` - The combatant's initiative.",
        "syntax": "c.init"
    },
    {
        "name": "`combatant.initmod`",
        "desc": "The combatant's initiative mod. Returns None if not visible.",
        "args": "",
        "returns": "`int` or `None` - The combatant's init mod.",
        "syntax": "c.initmod"
    },
    {
        "name": "`combatant.maxhp`",
        "desc": "The combatant's max HP. Returns None if not visible.",
        "args": "",
        "returns": "`int` or `None` - The combatant's max HP.",
        "syntax": "c.maxhp"
    },
    {
        "name": "`combatant.name`",
        "desc": "The combatant's name.",
        "args": "",
        "returns": "`str` - The combatant's name.",
        "syntax": "c.name"
    },
    {
        "name": "`combatant.note`",
        "desc": "The note on the combatant. Returns an empty string if there is none.",
        "args": "",
        "returns": "`str` - The combatant's notes.",
        "syntax": "c.note"
    },
    {
        "name": "`combatant.ratio`",
        "desc": "The combatant's health ratio (0%=0.0, 100%=1.0). Shows even if combatant is hidden.",
        "args": "",
        "returns": "`float` - The combatant's ratio of health:max health.",
        "syntax": "c.ratio"
    },
    {
        "name": "`combatant.temphp`",
        "desc": "The combatant's temporary hit points. Returns None if not visible.",
        "args": "",
        "returns": "`int` or `None` - The combatant's temp HP.",
        "syntax": "c.temphp"
    },
    {
        "name": "`combatant.effects`",
        "desc": "All effects on the combatant. Returns an empty list if there is none.",
        "args": "",
        "returns": "`list of SimpleEffect` - The combatant's effects.",
        "syntax": "c.effects"
    },
    {
        "name": "`combatant.attacks`",
        "desc": "A list of the combatant's attacks. Returns None if not visible.",
        "args": "",
        "returns": "`list` of `dict` - The combatant's attacks.",
        "syntax": "c.attacks"
    },
    {
        "name": "`combatant.type`",
        "desc": "The type of the object (combatant), to determine whether this is a group or not.",
        "args": "",
        "returns": "`str` - 'combatant'.",
        "syntax": "c.type"
    },
    {
        "name": "`combatant.set_hp(hp)`",
        "desc": "Sets a combatant's remaining hit points to a new value.",
        "args": "`hp` - *int* - The HP to set.",
        "returns": "`None`",
        "syntax": "c.set_hp(50)"
    },
    {
        "name": "`combatant.mod_hp(hp[, overflow])`",
        "desc": "Modifies a combatant's remaining hit points by a value.",
        "args": "`hp` - *int* - The amount of HP to add.\n`overflow` - *bool (default True)* - Whether or not to allow the modified hp to exceed the max",
        "returns": "`None`",
        "syntax": "c.mod_hp(-7)"
    },
    {
        "name": "`combatant.hp_str()`",
        "desc": "Gets a string describing a combatant's HP.",
        "args": "",
        "returns": "`str` - The string. Will show HP value if combatant is not hidden, or generalization.",
        "syntax": "c.hp_str()"
    },
    {
        "name": "`combatant.save(ability[, adv])`",
        "desc": "Rolls a combatant's saving throw.",
        "args": "`ability` - *str* - The type of save (`'str'`, `'dexterity'`, etc).\n`adv` - *bool or None (default None)* - Whether to roll the save with advantage. Rolls with advantage if True, disadvantage if False, or normally if None.",
        "returns": "`Result` - The rolled save. See `vroll()`.",
        "syntax": "c.save('str')"
    },
    {
        "name": "`combatant.wouldhit(to_hit)`",
        "desc": "Checks whether a roll would hit a combatant.",
        "args": "`to_hit` - *int* - The roll to check against AC.",
        "returns": "`bool` - Whether the attack would hit or not. `None` if the combatant's AC is not defined.",
        "syntax": "c.wouldhit(18)"
    },
    {
        "name": "`combatant.damage(dice_str, [crit=False, d=None, c=None, critdice=0])`",
        "desc": "Does damage to a combatant, and returns the rolled result and total, accounting for resistances.",
        "args": "`dice_str` - *str* - The damage to do (e.g. `'1d6[acid]'`).\n`crit` - *bool (optional, default False)* - Whether or not the damage should be rolled as a crit.\n`d` - *str (optional, default None)* - Any additional damage to add (equivalent of -d).\n`c` - *str (optional, default None)* - Any additional damage to add to crits (equivalent of -c).\n`critdice` - *int (optional, default 0)* - How many extra weapon dice to roll on a crit (in addition to normal dice).",
        "returns": "`dict` - A dictionary with two keys, `'damage'` and `'total'`, detailing the resulting string and total damage, respectively.",
        "syntax": "c.damage('2d6+3[slashing]')"
    },
    {
        "name": "`combatant.set_ac(ac)`",
        "desc": "Sets a combatant's armor class.",
        "args": "`ac` - *int or None* - The AC to set. (Equivalent to `!i opt NAME -ac AC`)",
        "returns": "`None`",
        "syntax": "c.set_ac(16)"
    },
    {
        "name": "`combatant.set_maxhp(maxhp)`",
        "desc": "Sets a combatant's maximum hit points to a new value. (Equivalent to !i hp NAME max MAXHP)",
        "args": "`maxhp` - *int or None* - The max HP to set.",
        "returns": "`None`",
        "syntax": "c.set_maxhp(100)"
    },
    {
        "name": "`combatant.set_thp(thp)`",
        "desc": "Sets a combatant's temporary hit points to a new value.",
        "args": "`thp` - *int* - The THP to set.",
        "returns": "`None`",
        "syntax": "c.set_thp(5)"
    },
    {
        "name": "`combatant.set_init(init)`",
        "desc": "Sets a combatant's initiative roll to a new value. (`Equivalent to !i opt NAME -p INIT`)",
        "args": "`init` - *int* - The initiative to set.",
        "returns": "`None`",
        "syntax": "c.set_init(20)"
    },
    {
        "name": "`combatant.set_name(name)`",
        "desc": "Sets a combatant's name. Does not check against duplicate names - be careful! (Equivalent to `!i opt NAME -name NAME`)",
        "args": "`name` - *str* - The new name.",
        "returns": "`None`",
        "syntax": "c.set_name('Bob')"
    },
    {
        "name": "`combatant.set_note(note)`",
        "desc": "Sets a combatant's note. (`Equivalent to !i note NAME NOTE`)",
        "args": "`note` - *str or None* - The new note.",
        "returns": "`None`",
        "syntax": "c.set_note('This is a note.')"
    },
    {
        "name": "`combatant.get_effect(name)`",
        "desc": "Gets a SimpleEffect, fuzzy searching (partial match) for a match.",
        "args": "`name` - *str* - The name of the effect to get.",
        "returns": "`SimpleEffect` - The effect.",
        "syntax": "c.get_effect('Rage')"
    },
    {
        "name": "`combatant.add_effect(name, args[, duration, conc, parent, end])`",
        "desc": "Adds a SimpleEffect to a combatant.",
        "args": "`name` - *str* - The name of the effect to add.\n`args` - *str* - The effect arguments to add (same syntax as `!init effect`).\n`duration` - *int (optional, default -1)* - The duration of the effect.\n`conc` - *bool (optional, default False)* - Whether the effect requires concentration.\n`parent` - *SimpleEffect (optional)* - The parent of the effect\n`end` - *bool (optional, default False)* - Whether the effect ticks on the end of turn.",
        "returns": "`None`",
        "syntax": "c.add_effect('Rage', '-d 2', 10, False)"
    },
    {
        "name": "`combatant.remove_effect(name)`",
        "desc": "Removes a SimpleEffect, fuzzy searching (partial match) for a match.",
        "args": "`name` - *str* - The name of the effect to remove.",
        "returns": "`None`",
        "syntax": "c.remove_effect('Rage')"
    },
    {
        "name": "`group.type`",
        "desc": "The type of the object (group), to determine whether this is a group or not.",
        "args": "",
        "returns": "`str` - 'group'.",
        "syntax": "group.type"
    },
    {
        "name": "`group.get_combatant(name)`",
        "desc": "Gets a SimpleCombatant, fuzzy searching (partial match) for a match.",
        "args": "`name` - The name of the combatant to get.",
        "returns": "`SimpleCombatant` - The combatant.",
        "syntax": "group.get_combatant('Padellis')"
    },
    {
        "name": "`effect.name`",
        "desc": "The name of the effect.",
        "args": "",
        "returns": "`str` - The name.",
        "syntax": "effect.name"
    },
    {
        "name": "`effect.duration`",
        "desc": "The initial duration of the effect, in rounds (-1 = infinite).",
        "args": "",
        "returns": "`int` - The duration.",
        "syntax": "effect.duration"
    },
    {
        "name": "`effect.remaining`",
        "desc": "The remaining duration of the effect, in rounds.",
        "args": "",
        "returns": "`int` - The remaining duration.",
        "syntax": "effect.remaining"
    },
    {
        "name": "`effect.effect`",
        "desc": "The applied effect of the object.",
        "args": "",
        "returns": "`dict` - A dictionary representing the applied effects of the object.",
        "syntax": "effect.effect"
    },
    {
        "name": "`effect.conc`",
        "desc": "Whether the effect requires concentration.",
        "args": "",
        "returns": "`bool` - Whether the effect requires concentration.",
        "syntax": "effect.conc"
    },
    {
        "name": "`effect.set_parent(parent)`",
        "desc": "Sets the parent effect of this effect.",
        "args": "`parent` - *SimpleEffect* - The parent effect.",
        "returns": "`None`",
        "syntax": "effect.set_parent(effect2)"
    },
    {
        "name": "`typeof(x)`",
        "desc": "Returns the data type of `x`.",
        "args": "The object you would like to know the type of.",
        "returns": "`str` - The type of object that `x` is. A string would return `'str'`, a vroll a `'SimpleRollResult'`, etc",
        "syntax": "typeof(vroll('3d8'))"
    },
    {
        "name": "`group.combatants`",
        "desc": "A list of `SimpleCombatants` in this group.",
        "args": "",
        "returns": "`list` - The combatants",
        "syntax": "group.combatants"
    },
    {
        "name": "`get(name[, default])`",
        "desc": "Gets the value of a variable, or default if it does not exist.",
        "args": "`name` - *str* - The name of the variable.\n`default` - *any, optional (default None)* - What to return if the variable does not exist.",
        "returns": "`any` - The value of the variable or default",
        "syntax": "get('ClericLevel',0)"
    },
    {
        "name": "`combatant.level`",
        "desc": "The combatant's spellcaster level. 0 if the combatant is not a player or spellcaster",
        "args": "",
        "returns": "`int` - The combatant's caster level.",
        "syntax": "c.level"
    },
    {
        "name": "`set(name, value)`\n`name = value`\n`nameA, nameB, ...nameZ = 1, 2, ...#`",
        "desc": "Sets a variable to a given value.\nCan set multiple variables at a time if using `a, b = 1, 2`",
        "args": "`name` - *str* - The name of the variable\n`value` - *any* - What to set the variable to.",
        "returns": "`None`",
        "syntax": "set('damage','1d4[fire]')`\n`toHit = '2d20kh1+3'`\n`text, roll = 'Rawr!', roll('1d8')"
    },
    {
        "name": "`argparse(args)`",
        "desc": "Returns a `ParsedArguments` object representing parsed user arguments.",
        "args": "`args` - *str* or *list* - ",
        "returns": "`ParsedArguments` - The arguments.",
        "syntax": "argparse('adv -rr 2 -b 1d4[bless]')"
    },
    {
        "name": "`ParsedArguments.get(arg, default=None, type_=str, ephem=False)`",
        "desc": "Gets a list of all values of an argument.",
        "args": "`arg` - *str* - The name of the argument to get.\n`default` - *any* - The default value to return if the arg is not found. Not cast to type.\n`type_` - *type* - The type that each value in the list should be returned as.\n`ephem` - *bool* - Whether to add applicable ephemeral arguments to the returned list.",
        "returns": "`list` - The values of the argument.",
        "syntax": "ParsedArguments.get(\"b\")"
    },
    {
        "name": "`ParsedArguments.last(arg, default=None, type_=str, ephem=False`",
        "desc": "Gets the last value of an arg.",
        "args": "`arg` - *str* - The name of the argument to get.\n`default` - *any* - The default value to return if the arg is not found. Not cast to type.\n`type_` - *type* - The type that the value should be returned as.\n`ephem` - *bool* - Whether to return applicable ephemeral arguments.",
        "returns": "`any` - The most recent value of an arg.",
        "syntax": "ParsedArguments.last(\"phrase\")"
    },
    {
        "name": "`ParsedArguments.adv(ea=False, boolwise=False, ephem=False)`",
        "desc": "Determines whether to roll with advantage, disadvantage, Elven Accuracy, or no special effect.",
        "args": "`ea` - *bool* - Whether to account for Elven Accuracy.\n`boolwise` - *bool* - Whether to return an integer or tribool representation.\n`ephem` - *bool* - Whether to return an ephemeral argument if such exists.",
        "returns": "`int` or `bool` - -1/False for dis, 0/None for normal, 1/True for adv, 2 for ea",
        "syntax": "ParsedArguments.adv()"
    },
    {
        "name": "`ParsedArguments.join(arg, connector, default=None, ephem=False)`",
        "desc": "Returns a str formed from all of one arg, joined by a connector. Equivalent to `connector.join(ParsedArguments.get(arg))`.",
        "args": "`arg` - *str* - The name of the argument to get.\n`connector` - *str* - What to join the arg by.\n`default` - *any* - The default value to return if the arg is not found. Not cast to type.\n`ephem` - *bool* - Whether to return applicable ephemeral arguments.",
        "returns": "`str` - The joined str.",
        "syntax": "ParsedArguments.join('d', '+')"
    }
]